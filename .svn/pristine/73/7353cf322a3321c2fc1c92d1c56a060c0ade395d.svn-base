<?php

namespace App\Http\Controllers\admin;

use Illuminate\Http\Request;
use App\Http\Controllers\Controller;
use URL;
use App\Product;
use App\Purchase_product;
use App\Purchase_order;
use App\sales_product;
use App\sales_order;
use App\payment_mode;
use App\customer;
use App\User;
use Carbon\Carbon;
use DB;
use Auth;
use Alert; 

class exchangeBillController extends Controller
{
    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index()
    {
         $branch_id=Auth::guard('admin')->user()->branch;
        $view_order=sales_order::join("customers","customers.id","=","sales_orders.customer_id")
                                ->join("sales_products","sales_products.sales_id","=","sales_orders.id")
                                ->where("sales_orders.branch_id",$branch_id)
                                ->where("sales_products.status",'2')
                                ->select('customers.customer_name as customer_name','sales_orders.id as orderId','sales_orders.*')->groupBy('sales_products.sales_id')
                                ->get();

        return view('admin.bills.salesBills',compact('view_order'));
    }

    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function create()
    {
        $branch_id=Auth::guard('admin')->user()->branch;
        $delete_order=sales_order::join("payment_modes","payment_modes.sales_id","=","sales_orders.id")
                                ->where("sales_orders.branch_id",$branch_id)
                                ->whereNotNull("payment_modes.reason")
                                ->select('sales_orders.id as orderId','sales_orders.*','payment_modes.*')
                                ->get();

        return view('admin.bills.delete',compact('delete_order'));
    }

    /**
     * Store a newly created resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function store(Request $request)
    {
        $sales_product = new sales_product;
        $ids = sales_order::where('bill_number','=',$request->bill_number)->first();
        $branch_id=Auth::guard('admin')->user()->branch;
        $sales_id=$ids->id;
        $sales_product->sales_id=$sales_id;
        $sales_product->branch_id=$branch_id;
        $sales_product->batch_id=$request->batch_no;
        $sales_product->product_id = $request->product_id;
        $sales_product->product_qty = $request->product_quantity;
        $sales_product->basic_cost = $request->product_price;
        $sales_product->gst = $request->product_gst;
        $sales_product->discount = $request->discount_per;
        $sales_product->mrp = $request->product_total;
        $sales_product->unit_id = 0;
        $sales_product->status = '2';
        $sales_product->save();

    }

    /**
     * Display the specified resource.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function show($id)

    {

        $branch_id=Auth::guard('admin')->user()->branch;
        $view_order=sales_order::join("customers","customers.id","=","sales_orders.customer_id")->where("sales_orders.branch_id",$branch_id)->where("sales_orders.id","=",$id)->select('customers.*','sales_orders.id as sales_id','sales_orders.*')->first();


        $product_payment_details=sales_product::join('products','products.id','=','sales_products.product_id')
                                    ->where("sales_products.branch_id",$branch_id)
                                    ->where("sales_products.status","!=","3")
                                    ->where("sales_products.status","!=","4")
                                    ->where("sales_products.sales_id","=",$id)
                                    ->select('products.product_name as name','sales_products.id as sales_ids','sales_products.*')
                                    ->get();  
        $pay_details = payment_mode::where('sales_id',$id)->get();              
        $login_id=$view_order->addedById;
        $sales_person=User::where("logins.id",$login_id)->first();
        $total_amount=sales_product::where('sales_id',$id)->whereNotIn('status',['3'])->whereNotIn('status',['4'])->sum('mrp');
        $total_paid_amount=payment_mode::where('sales_id',$id)->sum('paid_amount');
        $total_balance_amount=payment_mode::where('sales_id',$id)->sum('balance');
        $Po=Purchase_order::all();
        $count=count($product_payment_details);

        return view('admin.bills.exchange_product',compact('id','count','view_order','product_payment_details','sales_person','Po','product_name','total_amount','total_paid_amount','total_balance_amount','pay_details'));
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function edit($id)
    {
        //
    }

    /**
     * Update the specified resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function update(Request $request, $userId)
    {

        $payment_mode = New payment_mode;
        $payment_mode2 = payment_mode::where('sales_id',$userId)->first();

        $sales_order = sales_order::where('id',$userId)->first();
        $customer = customer::where('id',$sales_order->customer_id)->first();
        $branch_id=Auth::guard('admin')->user()->branch;
        $addedById=Auth::guard('admin')->user()->id;

        $sales_order->me_code=$request->me_code;
        $sales_order->total_amount = $request->total_amount;
        $sales_order->save();
        $paid_date = Carbon::now();
        $date=$paid_date->toDateString();


        // $payment_mode2 = payment_mode::where('sales_id','=',$userId)->update(['total_amount'=>$request->total_amount]);

        $paid_balance_amount = payment_mode::where('sales_id',$userId)->get();

        $total_amount=$request->total_amount;

        $count=count($paid_balance_amount);

        $paid_amounts=0;

        $i=1;

        foreach($paid_balance_amount as $paid_value)
        {
          
              $ids[]=$paid_value->id;

              $balance=abs($request->balance);
              $balance_type='credit';

              if( $request->balance<0)
                  $balance_type='debit';  


              if($paid_amounts==$total_amount)
                continue;

            $paid_amount=$paid_value->paid_amount;


            $paid_amounts+=$paid_amount;

            if( $paid_value->payment_mode=='credit')
            {
                $new_payment=payment_mode::find($paid_value->id)->replicate();
                $new_payment->total_amount=$total_amount;
                $new_payment->balance=$total_amount-$paid_amounts;
                $new_payment->save();
              if( $request->paid_amount>0 && $i==$count)
              {
                $paid_amount=$request->paid_amount;
                $payment_mode = new payment_mode;
                $payment_mode->sales_id = $userId;
                $payment_mode->branch_id = $branch_id;
                $payment_mode->payment_mode = $request->payment_mode;
                $payment_mode->paid_amount = $paid_amount;
                $payment_mode->total_amount = $request->total_amount;
                $payment_mode->card_amount = $request->card;
                $payment_mode->transaction_number = $request->transaction_no;
                $payment_mode->reference_number = $request->reference_no;
                $payment_mode->account_number = $request->account_no;
                $payment_mode->cheque_number = $request->cheque_no;
                $payment_mode->balance = $balance;
                $payment_mode->balance_type = $balance_type;
                $payment_mode->status = $request->payment_type;
                $payment_mode->sales_date = $date;
                $payment_mode->paid_date = $date;
                $payment_mode->save();


                $paid_amounts=$total_amount;
             }
                continue;
            } 

            if( $paid_amounts<=$total_amount)
            {
                $new_payment=payment_mode::find($paid_value->id)->replicate();
                $new_payment->total_amount=$total_amount;
                $new_payment->balance=$total_amount-$paid_amounts;
                $new_payment->save();
            } 


            if( $paid_amounts<$total_amount && $count==$i)
            {

              // $paid_amount=($total_amount-($paid_amounts-$paid_value->paid_amount));

              if( $request->paid_amount>0)
              {
                $paid_amount=$request->paid_amount;
                $payment_mode = new payment_mode;
                $payment_mode->sales_id = $userId;
                $payment_mode->payment_mode = $request->payment_mode;
                $payment_mode->branch_id = $branch_id;
                $payment_mode->paid_amount = $paid_amount;
                $payment_mode->total_amount = $request->total_amount;
                $payment_mode->card_amount = $request->card;
                $payment_mode->transaction_number = $request->transaction_no;
                $payment_mode->reference_number = $request->reference_no;
                $payment_mode->account_number = $request->account_no;
                $payment_mode->cheque_number = $request->cheque_no;
                $payment_mode->balance = $balance;
                $payment_mode->balance_type = $balance_type;
                $payment_mode->status = $request->payment_type;
                $payment_mode->sales_date = $date;
                $payment_mode->paid_date = $date;
                $payment_mode->save();


                $paid_amounts=$total_amount;
             }
            }


            if( $paid_amounts>$total_amount)
            {

                $paid_amount=max($total_amount-($paid_amounts-$paid_value->paid_amount),0);

                $payment_mode = new payment_mode;
                $payment_mode->sales_id = $userId;
                $payment_mode->branch_id = $branch_id;
                $payment_mode->payment_mode = $request->payment_mode;
                $payment_mode->paid_amount = $paid_amount;
                $payment_mode->total_amount = $request->total_amount;
                $payment_mode->card_amount = $request->card;
                $payment_mode->transaction_number = $request->transaction_no;
                $payment_mode->reference_number = $request->reference_no;
                $payment_mode->account_number = $request->account_no;
                $payment_mode->cheque_number = $request->cheque_no;
                $payment_mode->balance = $balance;
                $payment_mode->balance_type = $balance_type;
                $payment_mode->status = $request->payment_type;
                $payment_mode->sales_date = $date;
                $payment_mode->paid_date = $date;
                $payment_mode->save();

              $paid_amounts=$total_amount;
            }


          $payment_mode='';
          $i++;  
        }
           
        $delete = payment_mode::whereIn('id',$ids)->delete();

        $customer->branch_id = $branch_id;
        $customer->customer_name = $request->customer_name;
        $customer->customer_phone = $request->customer_phone;
        $customer->customer_address = $request->customer_address;
        $customer->shipping_address = $request->shipping_address;
        $customer->customer_gst = $request->customer_gst_no;
        $customer->addedById = $addedById;
        $customer->save();

        // $payment_mode->sales_id = $userId;
        // $payment_mode->payment_mode = $request->payment_mode;
        // $payment_mode->paid_amount = $request->paid_amount;
        // $payment_mode->total_amount = $request->total_amount;
        // $payment_mode->card_amount = $request->card;
        // $payment_mode->transaction_number = $request->transaction_no;
        // $payment_mode->reference_number = $request->reference_no;
        // $payment_mode->account_number = $request->account_no;
        // $payment_mode->cheque_number = $request->cheque_no;
        // $payment_mode->balance = $request->balance;
        // $payment_mode->status = $request->payment_type;
        // $payment_mode->save();

        Alert::success('save Successfully', 'Success');
        return redirect('admin/exchange_product/'.$userId);
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function destroy(Request $request)
    {
        $id = $request->id;
        $sales_product = sales_product::where('id','=',$id)->first();
        $sales_product->status='4';
        $sales_product->save();
    }

}
